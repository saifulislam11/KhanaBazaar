---------------- ALL necessary triggers --------


CREATE OR REPLACE TRIGGER CUSTOMER_PHONE_LIMIT_EXCEEDS
    BEFORE INSERT
    ON CUSTOMER_PHONE
    FOR EACH ROW
DECLARE
    ID           CHAR(10);
    COUNTER      NUMBER;
    LOOP_COUNTER NUMBER;
BEGIN
    --DBMS_OUTPUT.PUT_LINE('HELLO');
    ID := :NEW.CUSTOMER_ID;
    SELECT COUNT(*) INTO COUNTER FROM CUSTOMER_PHONE WHERE CUSTOMER_ID = ID;
    LOOP_COUNTER := 1;
    IF COUNTER >= 2 THEN
        FOR RECORD IN (SELECT * FROM CUSTOMER_PHONE WHERE CUSTOMER_ID = ID )
            LOOP
                --DBMS_OUTPUT.PUT_LINE(RECORD.PHONE_NO);
                IF LOOP_COUNTER <> COUNTER THEN
                    DELETE FROM CUSTOMER_PHONE WHERE CUSTOMER_ID = ID AND PHONE_NO = RECORD.PHONE_NO;
                END IF;
                LOOP_COUNTER := LOOP_COUNTER + 1;

            end loop;
    end if;
END;
/


---------- DELIVERY PICKER --------

CREATE OR REPLACE PROCEDURE ORDER_PICKED(OR_ID IN CHAR, FM_ID IN CHAR) IS
BEGIN

    INSERT INTO DELIVERS(ORDER_ID, FOODMAN_ID) VALUES (OR_ID, FM_ID);

end;
/

CREATE OR REPLACE TRIGGER ORDER_PICKED_TRIGGER
    AFTER INSERT
    ON DELIVERS
    FOR EACH ROW
DECLARE
    OR_ID CHAR(10);
    FM_ID CHAR(10);
BEGIN
    OR_ID := :NEW.ORDER_ID;
    FM_ID := :NEW.FOODMAN_ID;
    UPDATE FOODMAN SET STATUS = 'R' WHERE ID = FM_ID;
    UPDATE "ORDER" SET DELIVERY_TIME = TO_DATE('01-01-1000 00:00:00', 'DD/MM/YYYY HH24:MI:SS') WHERE ID = OR_ID;

end;
/


-------- procedure to change foodman status -------

CREATE OR REPLACE PROCEDURE CHANGE_FOODMAN_STATUS(FM_ID IN CHAR, ST IN CHAR) IS
BEGIN
    UPDATE FOODMAN SET STATUS = ST WHERE ID = FM_ID;
end;
/


--------- PROCEDURE TO UPDATE DELIVERY TIME TO SYDATE AFTER DELIVERY -----

CREATE OR REPLACE PROCEDURE ORDER_DELIVERED(ORDER_ID IN CHAR) IS
BEGIN
    UPDATE "ORDER" SET DELIVERY_TIME = SYSDATE WHERE ID = ORDER_ID;
end;
/




------------- FUNCTION TO GENERATE NEXT ID ---------------
CREATE OR REPLACE FUNCTION GET_NEXT_ID RETURN CHAR IS
    ID CHAR(10);
BEGIN
    SELECT ID_GENERATOR.NEXTVAL INTO ID FROM DUAL;
    RETURN ID;
end;
/

--------- PROCEDURE TO ADD FOODMAN -----------


CREATE OR REPLACE PROCEDURE ADD_FOODMAN(ADMIN_ID IN CHAR, FM_ID IN CHAR, NAME IN VARCHAR2, EMAIL IN VARCHAR2,
                                        PASSWORD IN VARCHAR2,
                                        PHONE_NO IN VARCHAR2, RATING IN NUMBER, IMAGE_PATH IN VARCHAR2, VEH_REG IN CHAR,
                                        TYPE VARCHAR2, SALARY IN FLOAT,
                                        DURATION IN NUMBER) IS
    --FM_ID       CHAR(10);
    CONTRACT_ID CHAR(10);
    VEH_ID      CHAR(10);
BEGIN
    --FM_ID := GET_NEXT_ID();
    VEH_ID := GET_NEXT_ID();
    CONTRACT_ID := GET_NEXT_ID();
    INSERT INTO FOODMAN(ID, NAME, EMAIL, PASSWORD_HASH, RATING, IMAGE_PATH)
    VALUES (FM_ID, NAME, EMAIL, PASSWORD, RATING, IMAGE_PATH);
    INSERT INTO FOODMAN_PHONE(ID, PHONE_NO) VALUES (FM_ID, PHONE_NO);
    -- NOW TO VEHICLE
    INSERT INTO VEHICLE(ID, REG_NO, TYPE) VALUES (VEH_ID, VEH_REG, TYPE);
    INSERT INTO DELIVERS_BY(FOODMAN_ID, VEHICLE_ID) VALUES (FM_ID, VEH_ID);
    -- NOW TO CONTRACT
    INSERT INTO CONTRACT(ID, DURATION, SALARY, INIT_RATING, DATE_OF_CONTRACT)
    VALUES (CONTRACT_ID, DURATION, SALARY, RATING, SYSDATE);
    INSERT INTO APPOINTS(FOODMAN_ID, ADMIN_ID, CONTRACT_ID) VALUES (FM_ID, ADMIN_ID, CONTRACT_ID);
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;


end;
/


--------------- SUSPEND CUSTOMER ------------

CREATE OR REPLACE PROCEDURE SUSPEND_CUSTOMER(CUST_ID IN CHAR) IS
BEGIN
    DELETE FROM CUSTOMER WHERE ID = CUST_ID;
    COMMIT ;
end;
/


-------------- SUSPEND CUSTOMER --------------

CREATE OR REPLACE PROCEDURE SUSPEND_FOODMAN(FM_ID IN CHAR) IS
BEGIN
    DELETE FROM FOODMAN WHERE ID = FM_ID;
    COMMIT;
end;
/



------------- FOODMAN PHONE --------------

create or replace trigger FOODMAN_PHONE_LIMIT_EXCEEDS
    before insert
    on FOODMAN_PHONE
    for each row
DECLARE
    FID           CHAR(10);
    COUNTER      NUMBER;
    LOOP_COUNTER NUMBER;
BEGIN
    --DBMS_OUTPUT.PUT_LINE('HELLO');
    FID := :NEW.ID;
    SELECT COUNT(*) INTO COUNTER FROM FOODMAN_PHONE WHERE ID = FID;
    LOOP_COUNTER := 1;

    IF COUNTER >= 2 THEN
        FOR RECORD IN (SELECT * FROM FOODMAN_PHONE WHERE ID = FID )
            LOOP
                --DBMS_OUTPUT.PUT_LINE(RECORD.PHONE_NO);
                IF LOOP_COUNTER <> COUNTER THEN
                    DELETE FROM FOODMAN_PHONE WHERE ID = FID AND PHONE_NO = RECORD.PHONE_NO;
                END IF;
                LOOP_COUNTER := LOOP_COUNTER + 1;

            end loop;
    end if;
END;
/
